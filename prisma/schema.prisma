// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  userType      UserType  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  
  // Contractor specific fields
  contractor  Contractor?
  
  // Customer specific fields
  customer    Customer?
  
  // Relationships
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  reviews          Review[]
  bookings         Booking[]
  quotes           Quote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contractor {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName    String
  description     String?   @db.Text
  serviceArea     String[]
  specialties     String[]
  yearsExperience Int
  licenseNumber   String?
  insuranceInfo   String?   @db.Text
  website         String?
  isVerified      Boolean   @default(false)
  rating          Float?
  totalJobs       Int       @default(0)
  totalReviews    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  portfolio     Portfolio[]
  quotes        Quote[]     @relation("ContractorQuotes")
  bookings      Booking[]
  reviews       Review[]    @relation("ContractorReviews")
  availability  Availability[]
}

model Customer {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quotes   Quote[]
  bookings Booking[]
  reviews  Review[] @relation("CustomerReviews")
}

model Portfolio {
  id           String     @id @default(cuid())
  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  title        String
  description  String?    @db.Text
  images       String[]
  projectType  String
  materials    String[]
  cost         Float?
  duration     String?
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Quote {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  customerId   String?
  customer     Customer?   @relation(fields: [customerId], references: [id])
  contractorId String
  contractor   Contractor  @relation("ContractorQuotes", fields: [contractorId], references: [id])
  
  projectType   String
  description   String      @db.Text
  squareFootage Float?
  materials     String[]
  location      String
  timeframe     String?
  budget        Float?
  
  estimatedCost Float?
  notes         String?     @db.Text
  status        QuoteStatus @default(PENDING)
  validUntil    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  booking Booking?
}

model Booking {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  customerId   String?
  customer     Customer?     @relation(fields: [customerId], references: [id])
  contractorId String
  contractor   Contractor    @relation(fields: [contractorId], references: [id])
  quoteId      String        @unique
  quote        Quote         @relation(fields: [quoteId], references: [id])
  
  scheduledDate DateTime
  status        BookingStatus @default(SCHEDULED)
  totalCost     Float
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  payments Payment[]
}

model Payment {
  id        String        @id @default(cuid())
  bookingId String
  booking   Booking       @relation(fields: [bookingId], references: [id])
  
  amount       Float
  currency     String    @default("USD")
  status       PaymentStatus @default(PENDING)
  stripeId     String?
  type         PaymentType
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  customerId   String?
  customer     Customer?  @relation("CustomerReviews", fields: [customerId], references: [id])
  contractorId String
  contractor   Contractor @relation("ContractorReviews", fields: [contractorId], references: [id])
  
  rating    Int
  title     String?
  comment   String? @db.Text
  images    String[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  content   String   @db.Text
  read      Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id           String     @id @default(cuid())
  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  dayOfWeek Int // 0 = Sunday, 1 = Monday, etc.
  startTime String // HH:MM format
  endTime   String // HH:MM format
  isActive  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([contractorId, dayOfWeek])
}

enum UserType {
  CUSTOMER
  CONTRACTOR
  ADMIN
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum BookingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  DEPOSIT
  FINAL
  FULL
}

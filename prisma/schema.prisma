// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String?
  userType      String    @default("CUSTOMER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts   Account[]
  sessions   Session[]
  customer   Customer?
  contractor Contractor?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id                String   @id @default(cuid())
  userId            String   @unique
  firstName         String
  lastName          String
  phone             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  propertyType      String?
  homeSize          String?
  preferredBudget   String?
  projectTimeline   String?
  preferences       String?  // JSON string for SQLite (materials, styles, features)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes          Quote[]
  reviews         Review[]
  savedContractors SavedContractor[]
  bookings        Booking[]
  payments        Payment[]
}

model Contractor {
  id              String    @id @default(cuid())
  userId          String    @unique
  businessName    String
  description     String?
  serviceArea     String    // JSON string for SQLite
  specialties     String    // JSON string for SQLite
  yearsExperience Int?
  licenseNumber   String?
  insuranceInfo   String?
  phone           String?
  website         String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  latitude        Float?
  longitude       Float?
  hourlyRate      Float?
  projectMinimum  Float?
  certifications  String?   // JSON string for SQLite
  availableHours  String?   // JSON string for SQLite
  portfolioImages String?   // JSON string for SQLite
  isVerified      Boolean   @default(false)
  rating          Float     @default(0.0)
  reviewCount     Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  quotes           Quote[]
  portfolio        Portfolio[]
  reviews          Review[]
  savedBy          SavedContractor[]
  bookings         Booking[]
  payments         Payment[]
}

model SavedContractor {
  id           String @id @default(cuid())
  customerId   String
  contractorId String
  createdAt    DateTime @default(now())

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([customerId, contractorId])
}

model Portfolio {
  id          String   @id @default(cuid())
  contractorId String
  title        String
  description  String?
  images       String    // JSON string for SQLite
  projectType  String
  materials    String    // JSON string for SQLite
  cost         Float?
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
}

model Quote {
  id            String      @id @default(cuid())
  customerId    String
  contractorId  String
  projectType   String
  description   String
  squareFootage Float?
  materials     String      // JSON string for SQLite
  location      String
  budget        Float?
  timeline      String?
  status        String      @default("PENDING")
  estimatedCost Float?
  notes         String?
  validUntil    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  booking    Booking?
  
  @@index([customerId])
  @@index([contractorId])
  @@index([status])
}

model Booking {
  id              String   @id @default(cuid())
  customerId      String
  contractorId    String
  quoteId         String   @unique
  scheduledDate   DateTime
  estimatedHours  Float?
  status          String   @default("SCHEDULED")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  quote      Quote      @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  payments   Payment[]
  
  @@index([customerId])
  @@index([contractorId])
  @@index([scheduledDate])
}

model Payment {
  id            String   @id @default(cuid())
  customerId    String
  contractorId  String
  bookingId     String?
  amount        Float
  stripePaymentIntentId String?
  status        String   @default("PENDING")
  paymentType   String   @default("FULL")
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  booking    Booking?   @relation(fields: [bookingId], references: [id])
  
  @@index([customerId])
  @@index([contractorId])
  @@index([status])
}

model Review {
  id           String    @id @default(cuid())
  customerId   String
  contractorId String
  rating       Int
  title        String?
  comment      String?
  images       String    // JSON string for SQLite
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  contractor Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  @@index([contractorId])
  @@index([rating])
}

model Message {
  id           String   @id @default(cuid())
  senderId     String
  receiverId   String
  
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Material {
  id          String @id @default(cuid())
  name        String @unique
  category    String
  description String?
  imageUrl    String?
  priceRange  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
}
